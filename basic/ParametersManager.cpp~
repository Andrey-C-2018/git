#include <codecvt>
#include "ParametersManager.h"

CParametersManagerException::CParametersManagerException(const int err_code, \
													const Tchar *err_descr) : \
													XException(err_code, err_descr) { }

CParametersManagerException::CParametersManagerException(const int err_code, \
													const Tstring &err_descr) : \
													XException(err_code, err_descr) { }

CParametersManagerException::CParametersManagerException(const CParametersManagerException &obj) : \
													XException(obj) { }

CParametersManagerException::~CParametersManagerException() throw() { }

//****************************************************************************

CParametersManager::CParametersManager(){ }

void CParametersManager::Open(const char *path) {

f.open(path, std::ios::in);
if (!f.is_open())
	throw CParametersManagerException(CParametersManagerException::E_FILE_NOT_FOUND, \
		_T("Config file cannot be opened"));

std::locale loc(std::locale::classic(), new std::codecvt_utf8<wchar_t>);
f.imbue(loc);
}

void CParametersManager::SetParameter(const Tchar *name, const Tchar *value){ }

const Tchar *CParametersManager::GetParameter(const Tchar *name){

if(!f.is_open())
	throw CParametersManagerException(CParametersManagerException::E_FILE_NOT_OPENED, \
								_T("The parameters file is not yet opened"));
if (!name || *name == _T('\0'))
	throw CParametersManagerException(CParametersManagerException::E_WRONG_NAME, \
								_T("Parameter name cannot be NULL or empty"));

Tstring::size_type pos = Tstring::npos;
while(pos == Tstring::npos && !f.eof()){
	std::getline(f, buffer);
	pos = buffer.find(name);
}
if (pos == Tstring::npos && f.eof()) {
	f.clear();
	f.seekg(0);
	while (pos == Tstring::npos && !f.eof()) {
		std::getline(f, buffer);
		pos = buffer.find(name);
	}
}

if(pos != Tstring::npos && pos == 0){
	Tstring::size_type pos_value = buffer.find_first_of(_T('='), pos + Tstrlen(name));
	if (pos_value == Tstring::npos) {
		CParametersManagerException e(CParametersManagerException::E_WRONG_FILE_FORMAT,\
									_T("Invalid config file format: param name - "));
		e << name;
		throw e;
	}
	else{
		const Tchar *p = buffer.c_str();
		return p + pos_value + 1;
	}
}
return NULL;
}

CParametersManager::~CParametersManager(){

if(f.is_open()) f.close();
}
